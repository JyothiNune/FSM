module router_fsm_tb();

    reg clk, rstn, pkt_valid, fifo_full;
    reg fifo_empty_0, fifo_empty_1, fifo_empty_2;
    reg sft_rst_0, sft_rst_1, sft_rst_2;
    reg parity_done, low_pkt_vld;
    reg [7:0] din;

    wire wr_enb_reg, detect_add, ld_state, laf_state;
    wire full_state, lfd_state, rst_int_reg, busy;

    // DUT instantiation
    router_fsm dut (
        .clk(clk), .rstn(rstn), .pkt_valid(pkt_valid), .din(din),
        .fifo_full(fifo_full), .fifo_empty_0(fifo_empty_0), .fifo_empty_1(fifo_empty_1),
        .fifo_empty_2(fifo_empty_2), .sft_rst_0(sft_rst_0), .sft_rst_1(sft_rst_1), .sft_rst_2(sft_rst_2),
        .parity_done(parity_done), .wr_enb_reg(wr_enb_reg), .detect_add(detect_add),
        .ld_state(ld_state), .laf_state(laf_state), .lfd_state(lfd_state),
        .full_state(full_state), .low_pkt_vld(low_pkt_vld),
        .rst_int_reg(rst_int_reg), .busy(busy)
    );

    // Clock generation
    initial begin
        clk = 0;
        forever #10 clk = ~clk;
    end

    // Reset task
    task reset();
    begin
        $display("----[ Resetting FSM ]----");
        @(negedge clk);
        rstn = 0;
        $display("Reset asserted at time = %0t", $time);
        @(negedge clk);
        rstn = 1;
        $display("Reset de-asserted at time = %0t", $time);
    end
    endtask

    // Initialize task
    task initialize();
    begin
        $display("----[ Initializing Inputs ]----");
        pkt_valid = 0;
        fifo_full = 0;
        fifo_empty_0 = 0;
        fifo_empty_1 = 0;
        fifo_empty_2 = 0;
        sft_rst_0 = 0;
        sft_rst_1 = 0;
        sft_rst_2 = 0;
        parity_done = 0;
        low_pkt_vld = 0;
        din = 8'b00000000;
        $display("Initialization done at time = %0t", $time);
    end
    endtask

    // Test vector 1
    task t1();
    begin
        $display("----[ Test Vector 1: Normal Packet, FIFO Empty ]----");
        @(negedge clk);
        pkt_valid = 1;
        din = 8'b00100001; // address 01
        fifo_empty_1 = 1;
        $display("Time %0t: Packet sent with address 01", $time);
        @(negedge clk);
        @(negedge clk);
        fifo_full = 0;
        pkt_valid = 0;
        $display("Time %0t: Packet valid de-asserted", $time);
        @(negedge clk);
        fifo_full = 0;
    end
    endtask

    // Test vector 2
    task t2();
    begin
        $display("----[ Test Vector 2: FIFO Full During Transmission ]----");
        @(negedge clk);
        pkt_valid = 1;
        din = 8'b10010001; // address 01
        fifo_empty_1 = 1;
        $display("Time %0t: Packet started, FIFO initially empty", $time);
        @(negedge clk);
        @(negedge clk);
        fifo_full = 1;
        $display("Time %0t: FIFO became full", $time);
        @(negedge clk);
        fifo_full = 0;
        $display("Time %0t: FIFO cleared", $time);
        @(negedge clk);
        parity_done = 0;
        low_pkt_vld = 1;
        $display("Time %0t: Low packet valid = 1", $time);
        @(negedge clk);
        @(negedge clk);
        fifo_full = 0;
    end
    endtask

    // Test vector 3
    task t3();
    begin
        $display("----[ Test Vector 3: FIFO Full and Becomes Empty Later ]----");
        @(negedge clk);
        pkt_valid = 1;
        din = 8'b00110001; // address 01
        fifo_empty_1 = 1;
        $display("Time %0t: Sending packet with FIFO initially empty", $time);
        @(negedge clk);
        @(negedge clk);
        fifo_full = 1;
        $display("Time %0t: FIFO became full", $time);
        @(negedge clk);
        fifo_full = 0;
        $display("Time %0t: FIFO cleared", $time);
        @(negedge clk);
        parity_done = 0;
        low_pkt_vld = 0;
        $display("Time %0t: Parity not done yet, low_pkt_vld = 0", $time);
        @(negedge clk);
        fifo_full = 0;
        pkt_valid = 0;
        $display("Time %0t: Packet valid de-asserted", $time);
        @(negedge clk);
        @(negedge clk);
    end
    endtask

    // Test vector 4
    task t4();
    begin
        $display("----[ Test Vector 4: Normal Flow With Parity Done ]----");
        @(negedge clk);
        pkt_valid = 1;
        din = 8'b01100001; // address 01
        fifo_empty_1 = 1;
        $display("Time %0t: Packet sent with parity eventually done", $time);
        @(negedge clk);
        @(negedge clk);
        fifo_full = 0;
        pkt_valid = 0;
        @(negedge clk);
        @(negedge clk);
        fifo_full = 1;
        $display("Time %0t: FIFO became full temporarily", $time);
        @(negedge clk);
        fifo_full = 0;
        @(negedge clk);
        parity_done = 1;
        $display("Time %0t: Parity done asserted", $time);
    end
    endtask

    // Main stimulus
    initial begin
        $display("====[ Starting Router FSM Simulation ]====");
        $dumpfile("router_fsm_tb.vcd");
        $dumpvars(0, router_fsm_tb);

        initialize();
        reset();
        t1();
        t2();
        t3();
        t4();

        $display("====[ Simulation Completed ]====");
        #100 $finish;
    end

endmodule